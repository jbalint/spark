/**
 * int-array based SPARK-L tokenizer for Java (auto-generated).
 * 
 * auto-generated by spark.internal.parse.tokenizer_to_java.
 * @author conley
 */
public class AutoTableTokenStream implements TokenStream, AutoTableTokenSymbols, AutoTableTokens {
    static boolean s_debug = false;

    public static StringBuffer s_debugBuff = new StringBuffer();

    private Source source;

    private String instring;

    private int index;

    private int start;

    private int prevEnd;

    private int type; //types defined by IntTokens
    
    public AutoTableTokenStream(Source source) {
        this.source = source;
        this.instring = source.getString();
        this.index = 0;
        this.start = 0;
        this.prevEnd = 0;
        this.type = -1;
        next();
    }

    public Source getSource() {
        return source;
    }

    public int getType() {
        return type;
    }

    public int getStart() {
        return start;
    }

    public int getEnd() {
        return index;
    }

    public String getString() {
        return instring.substring(start, index);
    }

    public int prevEnd() {
        return prevEnd;
    }

    /**
     * set start, end, type, token
     */
    public void next() {
        int stateNum = 0; //current state
        int tstart = index; //The index of the first consumed char for current
        // token
        int tindex = index;
        short action = -1;
        int actarg = -1;
        int instringLength = instring.length();
        while (true) { //Loop until explicit break

            char c = 0;
            int charNum;
            if (tindex < instringLength) {
                c = instring.charAt(tindex);
                charNum = (int) c;
            } else
                charNum = EOF_NUM;

            //protect against non-ascii character set encodings
            if (charNum > EOF_NUM) 
                action = E|ILLEGAL_CHAR;
            else
                action = table[stateNum][charNum];
            //don't bother recasting to short
            int type = action & ACTION_TYPE_MASK;
            actarg = action & ACTION_ARG_MASK;
            if (type == C) {
                if (s_debug) {
                    String str = (c == 0) ? "EOF" : String.valueOf(c);
                    if (stateNum == actarg)
                        s_debugBuff.append("<Take " + str + ">\n");
                    else
                        s_debugBuff.append("<Take " + str + "->"
                                + actarg + ">\n");
                }
                stateNum = actarg;
                tindex++;
                if (actarg == 0) //reset start when in init state
                    tstart = tindex;
            } else if (type == E) {
                if (s_debug)
                    s_debugBuff.append("<ENewTok " + stateNum + ':'
                            + AutoTableTokensUtil.actionToString((short)actarg) + ">\n");
                tindex++;
                break;
            } else if (type == N) {
                if (s_debug)
                    s_debugBuff.append("<NewTok " + stateNum + ':'
                            + AutoTableTokensUtil.actionToString((short)actarg) + ">\n");
                break;
            } else
                throw new InvalidTokenizerActionException("Invalid action");
        }
        //Keep a record of the end of the last token
        prevEnd = index;
        //Record the values for the new token
        index = tindex;
        start = tstart;
        type = actarg;
    }

    //table declaration (AUTO-GENERATED CONTENT HERE)
