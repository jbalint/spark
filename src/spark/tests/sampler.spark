#*****************************************************************************#
#* Copyright (c) 2004-2007, SRI International.                               *#
#* All rights reserved.                                                      *#
#*                                                                           *#
#* Redistribution and use in source and binary forms, with or without        *#
#* modification, are permitted provided that the following conditions are    *#
#* met:                                                                      *#
#*   * Redistributions of source code must retain the above copyright        *#
#*     notice, this list of conditions and the following disclaimer.         *#
#*   * Redistributions in binary form must reproduce the above copyright     *#
#*     notice, this list of conditions and the following disclaimer in the   *#
#*     documentation and/or other materials provided with the distribution.  *#
#*   * Neither the name of SRI International nor the names of its            *#
#*     contributors may be used to endorse or promote products derived from  *#
#*     this software without specific prior written permission.              *#
#*                                                                           *#
#* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS       *#
#* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT         *#
#* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR     *#
#* A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT      *#
#* OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,     *#
#* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT          *#
#* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,     *#
#* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY     *#
#* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT       *#
#* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE     *#
#* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.      *#
#*****************************************************************************#
#* "$Revision: 24 $" *#
#* $Source: /homedir/cvs/cvsroot/spark/src/spark/tests/sampler.spark,v $ *#
#*****************************************************************************#

#TODO: {pred} {solutionspat} while: repeat: forin: applytask ApplyPred

{defpredicate (procdone $proc)}
{defpredicate (something $something)}
{defpredicate (nothing $something)}
{defpredicate (_foo $something)}
{defpredicate (bar $something)}
{defpredicate (waymarker $something)}

(_foo "foo")
(bar "bar")

{defaction (proc1)}
{defprocedure Basic_Procedure_1
 cue: [do: (proc1)]
 precondition: (True)
 body:
 [do: (print "Basic Proc Expr" [])
  conclude: (procdone "proc1")]
}

{defaction (selectproc1)}
{defprocedure Select_Procedure_1
 cue: [do: (selectproc1)]
 precondition: (True)
 body:
 [select:
  (= 1 1) 
   [do: (print "one is equal to one" [])
    conclude: (procdone "selectproc1")]
  (True)
   [do: (print "one is not equal to one" [])]]
}

{defaction (parallelproc1)}
{defprocedure Parallel_Procedure
 cue: [do: (parallelproc1)]
 precondition: (True)
 body:
   [seq:
     [retractall: [$x] (waymarker $x)]
     [parallel:
        [do: (print "Parallel Branch 1" [])
         conclude: (waymarker 1)]
        [do: (print "Parallel Branch 2" [])
         conclude: (waymarker 2)]
        [do: (print "Parallel Branch 3" [])
         conclude: (waymarker 3)]
        [achieve: (something "Parallel Branch 4")
         conclude: (waymarker 4)]
    conclude: (procdone "parallelproc1")]
   ]
}

{defaction (seqproc1)}
{defprocedure Sequence_procedure_1
 cue: [do: (seqproc1)]
 precondition: (True)
 
 body:
 [seq: [do: (print "Sequential Expr 1" [])
        conclude: (waymarker 1)]
       [do: (print "Sequential Expr 2" [])
        conclude: (waymarker 2)]
       [do: (print "Sequential Expr 3" [])
        conclude: (waymarker 3)]
       [achieve: (something "Sequential Expr 4")
        conclude: (waymarker 4)]
  conclude: (procdone "seqproc1")]
}

{defprocedure Achieve_Something
 cue: [achieve: (something $foo)]
 precondition: (Ground $foo)
 body: [do: (print "Achieve Something %s" [$foo])]
}

{defprocedure Achieve_Nothing
 cue: [achieve: (nothing $foo)]
 precondition: (Ground $foo)
 body: [do: (print "Achieve Nothing %s" [$foo])]
}

{defaction (deepproc1)}
{defprocedure Deep_Proc
 cue: [do: (deepproc1)]
 precondition: (True)
 body:
 [seq: [do: (print "Sequence Expr 1" [])]
       [parallel:
      	   [achieve: (something "Sequence Expr 2: Parallel 1")]
      	   [achieve: (nothing "Sequence Expr 2: Parallel 2")]
      	   [achieve: (something "Sequence Expr 2: Parallel 3")]]
       [do: (print "Sequence Expr 3" [])]
  conclude: (procdone "deepproc1")]
}

{defaction (contextproc1)}
{defprocedure Context_Proc
 cue: [do: (contextproc1)]
 precondition: (True)
 body:
 [context: (and (_foo $_a) (_foo $_b))
  do: (print "Context Body" [])
  conclude: (procdone "contextproc1")]
}

{defaction (forallproc1)}
{defpredicate (forallval $num)}
{defprocedure Forall_procedure_1
 cue: [do: (forallproc1)]
 precondition: (True)
 
 body:
 [seq:
  [conclude: (forallval 1)]
  [conclude: (forallval 2)]
  [conclude: (forallval 3)]
  [conclude: (forallval 4)]
  [forall: [$x] (forallval $x)
     [do: (print "forall value: %s" [$x])
      conclude: (waymarker $x)]
  ]
  conclude: (procdone "forallproc1")]
}

{defaction (forallpproc1)}
{defpredicate (forallpval $num)}
{defprocedure For_all_parallel_procedure_1
 cue: [do: (forallpproc1)]
 precondition: (True)
 body:
 [seq:
  [retractall: [$x1] (forallpval $x1)]
  [retractall: [$x2] (waymarker $x2)]
  [conclude: (forallpval 1)]
  [conclude: (forallpval 2)]
  [conclude: (forallpval 3)]
  [conclude: (forallpval 4)]
  [forallp: [$x3] (forallpval $x3)
     [do: (print "forallp test: %s" [$x3])
      conclude: (waymarker $x3)]
  ]
  conclude: (procdone "forallpproc1")]
}

{defaction (forallpproc2)}
{defpredicate (forallpval2 $num)}
{defpredicate (forallpval2_proceed1)}
{defpredicate (forallpval2_proceed4)}
{defprocedure For_all_parallel_procedure_2
 cue: [do: (forallpproc2)]
 precondition: (True)
 body:
 [seq:
  [retract: (forallpval2_proceed1)]
  [retract: (forallpval2_proceed4)]
  [retractall: [$x1] (forallpval2 $x1)]
  [retractall: [$x2] (waymarker $x2)]
  [conclude: (forallpval2 1)]
  [conclude: (forallpval2 2)]
  [conclude: (forallpval2 3)]
  [conclude: (forallpval2 4)]
  [conclude: (forallpval2 5)]
  #block 1 and 4 from proceeding until 2 and 3 have gone.
  [forallp: [$x3] (forallpval2 $x3)
     [select: (= $x3 1)
              [wait: (forallpval2_proceed1) 
                 [do: (print "1 is proceeding" [])]
                  conclude: (waymarker 1)]
              (= $x3 2)
              [seq:
                [do: (print "2 is unblocking 4" [])
                 conclude: (forallpval2_proceed4)]
                [conclude: (waymarker 2)] ]
              (= $x3 3)
              [seq:
                [do: (print "3 is unblocking 1" [])
                 conclude: (forallpval2_proceed1)]
                [conclude: (waymarker 3)]]
              (= $x3 4)
              [wait: (forallpval2_proceed4) 
                [do: (print "4 is proceeding" [])]
                 conclude: (waymarker 4)]
              (= $x3 5)
              [do: (print "5 is executing" [])
               conclude: (waymarker 5)] ]
  ]
  conclude: (procdone "forallpproc2")]
}

{defpredicate (solutionsp1 $x)}
(solutionsp1 1)
(solutionsp1 2)
(solutionsp1 3)
{defaction (solutionsproc1)}
{defprocedure Solutions_Procedure_1
  cue: [do: (solutionsproc1)]
  precondition: (True)
  body:
  [seq:
   [do: (print "Running Solutions Proc 1" [])]
   [retractall: [$x1] (solutionsp1 $x1)]
   [conclude: (solutionsp1 1)]
   [conclude: (solutionsp1 2)]
   [conclude: (solutionsp1 3)]
   [retractall: [$x2] (waymarker $x2)]

   [set: $_solnset (solutionspat [$xa] (solutionsp1 $xa) [$xa])]
   [context: (= [[3][2][1]] (solutionspat [$xb] (solutionsp1 $xb) [$xb]))]
   [conclude: (waymarker 1)]

   [retract: (solutionsp1 2)]
   [context: (= [[3][1]] (solutionspat [$xc] (solutionsp1 $xc) [$xc]))]
   [conclude: (waymarker 2)]

   [retractall: [$x3] (solutionsp1 $x3)]
   [context: (= [] (solutionspat [$xd] (solutionsp1 $xd) [$xd]))]
   [conclude: (waymarker 3)]

   [do: (print "Solutionsproc1 Success" [])]
   conclude: (procdone "solutionsproc1")]
}

{defpredicate (solutionspredp1 $x)}
{defaction (solutionspredproc1)}
{defprocedure Solutionspred_Procedure_1
  cue: [do: (solutionspredproc1)]
  precondition: (True)
  body:
  [seq:
   [do: (print "Running Solutionspred Test 1" [])]
   [retractall: [$x1] (solutionspredp1 $x1)]
   [conclude: (solutionspredp1 1)]
   [conclude: (solutionspredp1 2)]
   [conclude: (solutionspredp1 3)]
   [retractall: [$x2] (waymarker $x2)]

   [set: $pred1 (solutionspred (solutionspredp1 $x3) [$x3])]
   [context: (= [[1][2][3]] (solutionspat [$x4] (ApplyPred $pred1 $x4) [$x4]))]
   [conclude: (waymarker 1)]

   #retract one element, make sure pred1 unchanged, define pred2
   #and make sure it has updated solutions
   [retract: (solutionspredp1 2)]
   [context: (= [[1][2][3]] (solutionspat [$x5] (ApplyPred $pred1 $x5) [$x5]))]
   [set: $pred2 (solutionspred (solutionspredp1 $x6) [$x6])]
   [context: (= [[1][3]] (solutionspat [$x7] (ApplyPred $pred2 $x7) [$x7]))]
   [conclude: (waymarker 2)]

   #retract everything, make sure pred1 unchanged, define new pred3
   #and make sure it has empty solutions
   [retractall: [$x8] (solutionspredp1 $x8)]
   [context: (= [[1][2][3]] (solutionspat [$x9] (ApplyPred $pred1 $x9) [$x9]))]
   [conclude: (waymarker 3)]

   [set: $pred3 (solutionspred (solutionspredp1 $x10) [$x10])]
   [context: (= [] (solutionspat [$x11] (ApplyPred $pred3 $x11) [$x11]))]
   [conclude: (waymarker 4)]

   [do: (print "Solutionspredproc1 Success" [])]
   conclude: (procdone "solutionspredproc1")]
}

{defaction (tryproc1)}
{defprocedure Try_Procedure_1
 precondition: (True)
 cue: [do: (tryproc1)]
 body:
 [seq:
  [do: (print "Running Try Proc 1" [])]
  [retractall: [$x] (waymarker $x)]

  [try: [succeed: ] [conclude: (waymarker 1)]
        [] [fail: "try took wrong branch"]]
  [context: (waymarker 1)]
  [try: [fail: "test fail"] [fail: "try 2 took wrong branch"]
        [] [conclude: (waymarker 2)]]
  [context: (waymarker 2)]

  #test multiple options
  [try: [fail: "test fail"] [fail: "try 3 took branch 0"]
        [fail: "test fail"] [fail: "try 3 took branch 1"]
        [fail: "test fail"] [fail: "try 3 took branch 2"]
        [fail: "test fail"] [fail: "try 3 took branch 3"]
        [] [conclude: (waymarker 3)]]
  [context: (waymarker 3)]

  #nested try statement that tests that try fails if
  #all options fail
  [try:
        #should fail
        [try: [fail: "test fail"] [fail: "try 4 took branch 1"]
              [fail: "test fail"] [fail: "try 4 took branch 2"]
              [fail: "test fail"] [succeed:]]
          [fail: "try 4 subtry should have failed"]
        [] [conclude: (waymarker 4)]]
  [do: (print "Tryproc1 success" [])]
  conclude: (procdone "tryproc1")]
}

{defaction (sampler)}
{defprocedure Sampler
 cue: [do: (sampler)]
 precondition: (True)
 body:
 [seq:
   [do: (proc1)]
   [do: (selectproc1)]
   [do: (seqproc1)]
   [do: (parallelproc1)]
   [do: (solutionsproc1)]
   [do: (solutionspredproc1)]
   [do: (tryproc1)]
   [do: (forallproc1)]
   [do: (forallpproc1)]
   [do: (forallpproc2)]
 ]
}


exportall:
