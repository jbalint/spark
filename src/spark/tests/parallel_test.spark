#!/usr/bin/env spark
#*****************************************************************************#
#* Copyright (c) 2004-2007, SRI International.                               *#
#* All rights reserved.                                                      *#
#*                                                                           *#
#* Redistribution and use in source and binary forms, with or without        *#
#* modification, are permitted provided that the following conditions are    *#
#* met:                                                                      *#
#*   * Redistributions of source code must retain the above copyright        *#
#*     notice, this list of conditions and the following disclaimer.         *#
#*   * Redistributions in binary form must reproduce the above copyright     *#
#*     notice, this list of conditions and the following disclaimer in the   *#
#*     documentation and/or other materials provided with the distribution.  *#
#*   * Neither the name of SRI International nor the names of its            *#
#*     contributors may be used to endorse or promote products derived from  *#
#*     this software without specific prior written permission.              *#
#*                                                                           *#
#* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS       *#
#* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT         *#
#* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR     *#
#* A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT      *#
#* OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,     *#
#* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT          *#
#* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,     *#
#* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY     *#
#* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT       *#
#* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE     *#
#* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.      *#
#*****************************************************************************#
#* "$Revision: 367 $" *#
#* $Source: /homedir/cvs/cvsroot/spark/src/spark/tests/parallel_test.spark,v $ *#
#*****************************************************************************#

main: parallel_test

importall: spark.lang.list
importall: spark.tests.unit

export: parallel_unit_tests

{defaction (parallel_test $args)}
{defaction (mytest1)}
{defaction (mytest2)}

{defaction (parallel_unit_tests $args)}
{defaction (parallel_unit_test1)}
{defaction (parallel_unit_test2)}

{defprocedure _parallel_test
  cue: [do: (parallel_test $args)]
  precondition: (Ground $args)
  body: [seq:
	  [do: (mytest1)]
	  [do: (mytest2)]
	  ]}

{defprocedure _mytest1
  cue: [do: (mytest1)]
  precondition: (True)
  body: [context: (True)
	 parallel: [do: (print "hi" [])] [do: (print "ho" [])]
		   ]}

{defprocedure _mytest2
  cue: [do: (mytest2)]
  precondition: (True)
  body: [try: 
	  [parallel: [seq:
		       [do: (print "mytest2a" [])]
		       [do: (sleep 4)]
		       [do: (print "mytest2b" [])]]
		     [seq:
		       [do: (sleep 1)]
		       [do: (print "mytest2c" [])]
		       [fail: "deliberate"]]]
	  [do: (print "mytest2 - parallel should have failed by didn't" [])]
	  []
	  [do: (print "mytest2 - parallel failed as expected" [])]
	  ]}


{defprocedure _parallel_unit_tests
  cue: [do: (parallel_unit_tests $args)]
  precondition: (Ground $args)
  body:
  [seq:
     [do: (print "PARALLEL TESTS" [])]
     [do: (print "----------------" [])]
     [do: (print "Starting parallel tests..." [])]
     [do: (parallel_unit_test1)]
     [do: (parallel_unit_test2)]
     [do: (print "Parallel Unit Tests Complete, ALL TESTS SUCCEEDED" [])] 
]}

{defprocedure _Parallel_Unit_Test1
  cue: [do: (parallel_unit_test1)]
  precondition: (True)
  body:
   [seq:
     [do: (print "Starting Parallel Unit Test 1..." [])]
     [set: $ptask {task []
            [parallel: [do: (print "hi" [])] [do: (print "ho" [])]] } ]
     [do: (AssertSucceed $ptask)]
     [do: (print "Parallel Unit Test 1 succeeded" [])]
   ]}

{defprocedure _Parallel_Unit_Test_2
  cue: [do: (parallel_unit_test2)]
  precondition: (True)
  body:
   [seq:
      [do: (print "Starting Parallel Unit Test 2..." [])]
      [set: $ptask {task []
	  [parallel: [seq:
		       [do: (print "branch 1 a" [])]
		       [do: (sleep 4)]
		       [do: (print "branch 1 b" [])]]
		     [seq:
		       [do: (print "branch 2 a" [])]
		       [do: (sleep 1)]
		       [do: (print "branch 2 b" [])]
		       [fail: "deliberate"]]] }]
      [do: (AssertFail $ptask)]
      [do: (print "Parallel Unit Test 2 Succeeded" [])]
   ] }


{defaction (unit_parallel_test1 $args)}
{defprocedure UnitParallel_Test1
  cue: [do: (unit_parallel_test1 $args)]
  precondition: (Ground $args)
  body:
   [seq:
     [do: (print "Starting Parallel Unit Test 1..." [])]
     [set: $ptask {task []
            [parallel: [do: (print "hi" [])] [do: (print "ho" [])]] } ]
     [try:
       [do: (AssertSucceed $ptask)]
       [do: (actTestSucceed "unit_parallel_test1")]
       [fail: (funcTestFailed "unit_parallel_test1" "Parallel failed")]
       []
     ]
   ]
}

{defaction (unit_parallel_test2 $args)}
{defprocedure Unit_Parallel_Test2
  cue: [do: (unit_parallel_test2 $args)]
  precondition: (Ground $args)
  body:
   [seq:
      [do: (print "Starting Parallel Unit Test 2..." [])]
      [set: $ptask {task []
    [parallel: [seq:
           [do: (print "branch 1 a" [])]
           [do: (sleep 4)]
           [do: (print "branch 1 b" [])]]
         [seq:
           [do: (print "branch 2 a" [])]
           [do: (sleep 1)]
           [do: (print "branch 2 b" [])]
           [fail: "deliberate"]]] }]
      [try:
        [do: (AssertFail $ptask)]
        [do: (actTestSucceed "unit_parallel_test2")]
        [fail: (funcTestFailed "unit_parallel_test2" "Parallel failed")]
        []
      ]
   ]
}