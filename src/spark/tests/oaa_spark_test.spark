#!/usr/bin/env spark
#*****************************************************************************#
#* Copyright (c) 2004-2007, SRI International.                               *#
#* All rights reserved.                                                      *#
#*                                                                           *#
#* Redistribution and use in source and binary forms, with or without        *#
#* modification, are permitted provided that the following conditions are    *#
#* met:                                                                      *#
#*   * Redistributions of source code must retain the above copyright        *#
#*     notice, this list of conditions and the following disclaimer.         *#
#*   * Redistributions in binary form must reproduce the above copyright     *#
#*     notice, this list of conditions and the following disclaimer in the   *#
#*     documentation and/or other materials provided with the distribution.  *#
#*   * Neither the name of SRI International nor the names of its            *#
#*     contributors may be used to endorse or promote products derived from  *#
#*     this software without specific prior written permission.              *#
#*                                                                           *#
#* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS       *#
#* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT         *#
#* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR     *#
#* A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT      *#
#* OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,     *#
#* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT          *#
#* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,     *#
#* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY     *#
#* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT       *#
#* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE     *#
#* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.      *#
#*****************************************************************************#
#* "$Revision: 24 $" *#
#* $Source: /homedir/cvs/cvsroot/spark/src/spark/tests/oaa_spark_test.spark,v $ *#
#*****************************************************************************#
main: mymain

importfrom: spark.io.oaa

{defpredicate (p $num $successor)}
{defaction (act $in $out)}
{defaction (mymain $args)}

(p 1 2)
(p 2 3)
(p 3 4)

(Solvable "p" (qent p))
(Solvable "act" (qent act))

{defprocedure _mymain
  cue: [do: (mymain +$_args)]
  #precondition: (Ground $args)
  body: [seq:
	  [do: (oaaStart $host 3378 "SomeServer")]
	  #[do: (sleep 3)]
	  [do: (print "solving (p 1 $x1) via OAA" [])]
	  [do: (oaaSolve "p" 1 $x1)]
	  [do: (print "$x1=%s" [$x1])]
	  [do: (print "solving (p 2 $x2) via OAA" [])]
	  [do: (oaaSolve "p" 1 $x2)]
	  [do: (print "$2x=%s" [$x2])]
	  [do: (print "solving (p 3 $x3) via OAA" [])]
	  [do: (oaaSolve "p" 1 $x3)]
	  [do: (print "$x3=%s" [$x3])]
	  [do: (print "solving (act 5 $y) via OAA" [])]
	  [do: (oaaSolve "act" 5 $y)]
	  [do: (print "$y=%s" [$y])]
	  [do: (interleaveTest)]
	  ]}

{defprocedure _act
  cue: [do: (act +$input -$output)]
  precondition: (= $output (+ $input 1))
  body: [do: (print "(act %d %d)" [$input $output])]}


################
# Test interleaved requests

{defpredicate (InterleaveFact $x)}

{defpredicate (InterleaveDone $x)}

{defaction (interleaveTest)}

{defprocedure _interleaveTest
  cue: [do: (interleaveTest)]
  precondition: (True)
  body: [seq:
	  [retractall: [$x] (InterleaveFact $x)]
	  # >1 >2 <1 <2
	  [parallel:
	    [seq:
	      [do: (print ">1" [])]
	      [do: (oaaSolve "interleave" 1)]
	      [do: (print "<1" [])]
	      [conclude: (InterleaveDone 2)]]
	    [seq:
	      [wait: (InterleaveFact 1) []]
	      [do: (print ">2" [])]
	      [do: (oaaSolve "interleave" 2)]
	      [do: (print "<2" [])]]
	    [seq:
	      [wait: (InterleaveFact 2) []]
	      [conclude: (InterleaveDone 1)]]]
	  # >3 >4 <4 <3
	  [parallel:
	    [seq:
	      [do: (print ">3" [])]
	      [do: (oaaSolve "interleave" 3)]
	      [do: (print "<3" [])]]
	    [seq:
	      [wait: (InterleaveFact 3) []]
	      [do: (print ">4" [])]
	      [do: (oaaSolve "interleave" 4)]
              [do: (print "<4" [])]
              [conclude: (InterleaveDone 3)]]
            [seq:
              [wait: (InterleaveFact 4) []]
              [conclude: (InterleaveDone 4)]]
            ]]}

{defaction (interleave $value)}
(Solvable "interleave" (qent interleave))

{defprocedure _interleave
  cue: [do: (interleave +$x)]
  precondition: (True)
  body: [seq:
          [conclude: (InterleaveFact $x)]
          [wait: (InterleaveDone $x) []]]}


	  
