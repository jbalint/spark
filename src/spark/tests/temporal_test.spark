#*****************************************************************************#
#* Copyright (c) 2004-2007, SRI International.                               *#
#* All rights reserved.                                                      *#
#*                                                                           *#
#* Redistribution and use in source and binary forms, with or without        *#
#* modification, are permitted provided that the following conditions are    *#
#* met:                                                                      *#
#*   * Redistributions of source code must retain the above copyright        *#
#*     notice, this list of conditions and the following disclaimer.         *#
#*   * Redistributions in binary form must reproduce the above copyright     *#
#*     notice, this list of conditions and the following disclaimer in the   *#
#*     documentation and/or other materials provided with the distribution.  *#
#*   * Neither the name of SRI International nor the names of its            *#
#*     contributors may be used to endorse or promote products derived from  *#
#*     this software without specific prior written permission.              *#
#*                                                                           *#
#* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS       *#
#* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT         *#
#* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR     *#
#* A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT      *#
#* OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,     *#
#* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT          *#
#* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,     *#
#* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY     *#
#* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT       *#
#* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE     *#
#* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.      *#
#*****************************************************************************#
#* "$Revision: 24 $" *#
#* $Source: /homedir/cvs/cvsroot/spark/src/spark/tests/temporal_test.spark,v $ *#
#*****************************************************************************#
main: meta_struct_test

importall: spark.lang.list
importall: spark.lang.meta
importall: spark.lang.advice
importall: spark.lang.temporal
#XXX need to figure out what to do with spark.module
#importall: spark.module

{defaction (meta_struct_test $args)}
{defaction (x $x) 
  properties: [(avgExecTime "PT30M") (avgRecoveryTime "PT10M")]}
{defaction (test $x)
  properties: [(avgExecTime "PT40M") (avgRecoveryTime "PT20M")]}
{defpredicate (p $x)}

(Deadline "do test.2|do_print_Symbol_%s...0" "20040303T1700Z")

{defprocedure do_test
  cue: [do: (meta_struct_test $args)]
  precondition: (Ground $args)
  body: [seq:
	  [forall: [$taskid $dl] (Deadline $taskid $dl)
		   [do: (print "(Deadline %r %r)" [$taskid $dl])]]
	  [forall: [$sym $proc $name $ts] (Do $sym $proc $name)
		 [seq: [do: (print "Symbol %s, procname %s" [$sym $name])]
		       [context: (ProcedureTaskStructure $proc $ts)]
		       [do: (print "Procedure:\n%s\nStructure:%s"
				   [$proc $ts])]]]]}

{defprocedure print_object_level_goals
  cue: [newfact: (StartedProcedure $pi)]
  precondition: (and (Objective $pi $obj))
  body: [seq: [context: (TemporalTaskInfo $pi $ts)]
	      [do: (print "Procedure Instance:\n%s\nStructure:%s" [$pi $ts])]]
  }



## {defprocedure print_object_level_procedures
##   cue: [newfact: (StartedProcedure $tframe)]
##   precondition: (and (Objective $tframe $obj)
## 		     (ProcInstId $tframe $pid))
##   body: [do: (print "*  StartedProcedure: %s" [$pid])]
##   }

{defprocedure seq
  cue: [do: (test $x)]
  precondition: (= $x 1)
  body: [seq: [do: (x 1)]
	      [do: (x 2)]
	      [do: (x 3)]]}

{defprocedure parallel
  cue: [do: (test $x)]
  precondition: (= $x 1)
  body: [parallel: [do: (x 1)]
		   [do: (x 2)]
		   [do: (x 3)]]}



{defprocedure select
  cue: [do: (test $x)]
  precondition: (= $x 1)
  body: [select: (True) [do: (x 1)]
		 (True) [do: (x 2)]
		 (True) [do: (x 3)]]}



{defprocedure complex
  cue: [do: (test $x)]
  precondition: (= $x 1)
  body: [parallel:
	  [context: (True)
	   select: (True) [seq: [do: (x 11)] [do: (x 12)]]
		   (True) [context: (p 2) do: (x 2) conclude: (p 2)]
		   (True) [do: (x 3)]]
	  [seq: [do: (x 4)] [do: (x 5)]]]}


