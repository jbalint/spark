#*****************************************************************************#
#* Copyright (c) 2004-2007, SRI International.                               *#
#* All rights reserved.                                                      *#
#*                                                                           *#
#* Redistribution and use in source and binary forms, with or without        *#
#* modification, are permitted provided that the following conditions are    *#
#* met:                                                                      *#
#*   * Redistributions of source code must retain the above copyright        *#
#*     notice, this list of conditions and the following disclaimer.         *#
#*   * Redistributions in binary form must reproduce the above copyright     *#
#*     notice, this list of conditions and the following disclaimer in the   *#
#*     documentation and/or other materials provided with the distribution.  *#
#*   * Neither the name of SRI International nor the names of its            *#
#*     contributors may be used to endorse or promote products derived from  *#
#*     this software without specific prior written permission.              *#
#*                                                                           *#
#* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS       *#
#* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT         *#
#* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR     *#
#* A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT      *#
#* OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,     *#
#* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT          *#
#* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,     *#
#* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY     *#
#* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT       *#
#* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE     *#
#* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.      *#
#*****************************************************************************#
#* "$Revision: 288 $" *#
#* $Source: $ *#


{defconstant LEVEL_ALL}
{defconstant LEVEL_DEBUG}
{defconstant LEVEL_INFO}
{defconstant LEVEL_FAILURE}
{defconstant LEVEL_EXCEPTION}
{defconstant LEVEL_FATAL}
{defconstant LEVEL_OFF}

{defaction (loggerPause)
  doc: "Pause the logger."
  imp: (pyAction "" (pyMod "spark.util.logger" "loggerPause"))}

{defaction (loggerResume)
  doc: "Resume the logger."
  imp: (pyAction "" (pyMod "spark.util.logger" "loggerResume"))}

{defaction (logInfo $message rest: $args)
  doc: "Log a message."
  imp: (pyAction "+*+" (pyMod "spark.util.logger" "logInfo"))}

{defaction (logWarning $message rest: $args)
  doc: "Log a warning message"
  imp: (pyAction "+*+" (pyMod "spark.util.logger" "logWarning"))}

{defaction (logDebug $message rest: $args)
  doc: "Log a debug message"
  imp: (pyAction "+*+" (pyMod "spark.util.logger" "logDebug"))}

{defaction (logError $message rest: $args)
  doc: "Log an error message"
  imp: (pyAction "+*+" (pyMod "spark.util.logger" "logError"))}

{defpredicate (LogInfo $message rest: $args)
  doc: "Log a message."
  imp: (pyPredicate "+*+" (pyMod "spark.util.logger" "logInfo"))}

{defpredicate (LogWarning $message rest: $args)
  doc: "Log a warning message"
  imp: (pyPredicate "+*+" (pyMod "spark.util.logger" "logWarning"))}

{defpredicate (LogDebug $message rest: $args)
  doc: "Log a debug message"
  imp: (pyPredicate "+*+" (pyMod "spark.util.logger" "logDebug"))}

{defpredicate (LogError $message rest: $args)
  doc: "Log an error message"
  imp: (pyPredicate "+*+" (pyMod "spark.util.logger" "logError"))}

{defaction (loggerSetLevel $level)
  doc: "Set SDL's level"
  imp: (pyAction "+" (pyMod "spark.util.logger" "loggerSetLevel"))}

{deffunction (loggerGetFilename)
  doc: "Get the SDL's filename."
  imp: (pyFunction "" (pyMod "spark.util.logger" "loggerGetFilename"))}

exportall:
