#*****************************************************************************#
#* Copyright (c) 2004-2007, SRI International.                               *#
#* All rights reserved.                                                      *#
#*                                                                           *#
#* Redistribution and use in source and binary forms, with or without        *#
#* modification, are permitted provided that the following conditions are    *#
#* met:                                                                      *#
#*   * Redistributions of source code must retain the above copyright        *#
#*     notice, this list of conditions and the following disclaimer.         *#
#*   * Redistributions in binary form must reproduce the above copyright     *#
#*     notice, this list of conditions and the following disclaimer in the   *#
#*     documentation and/or other materials provided with the distribution.  *#
#*   * Neither the name of SRI International nor the names of its            *#
#*     contributors may be used to endorse or promote products derived from  *#
#*     this software without specific prior written permission.              *#
#*                                                                           *#
#* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS       *#
#* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT         *#
#* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR     *#
#* A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT      *#
#* OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,     *#
#* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT          *#
#* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,     *#
#* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY     *#
#* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT       *#
#* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE     *#
#* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.      *#
#*****************************************************************************#
#* "$Revision:: 470                                                       $" *#
#* "$HeadURL:: https://svn.ai.sri.com/projects/spark/trunk/spark/src/spar#$" *#
#*****************************************************************************#

{deffunction (md5 $str)
  doc: "Return the digest of $str." 
  imp: (pyFunction "+" (pyModRaw "spark.util.misc" "calculate_md5"))}

{deffunction (compress $str)
  doc: "Compresses the data in $str, returning a string contained compressed data." 
  imp: (pyFunction "+" (pyModRaw "zlib" "compress"))}

{deffunction (decompress $str)
  doc: "Decompresses the data in $str, returning a string containing the uncompressed data." 
  imp: (pyFunction "+" (pyModRaw "zlib" "decompress"))}

{deffunction (createInstanceOf $obj)
  doc: "create an instance"
  imp: (pyFunction "+" (pyModRaw "spark.util.misc" "createInstanceOf"))}

{defaction (generateId $num)
  doc: "Generate a unique numeric id."
  imp: (pyAction "-" (pyModRaw "spark.util.misc" "IDGENERATOR"))}

{defpredicate (GeneratedId $prefix $id) 
 doc: "This predicate is true of every possible $id constructed from $prefix by appending an integer. Thus (GeneratedId \"thing\" \"thing1\") would be true, as would be (GeneratedId \"thing\" \"thing2845728\")."
  imp: (pyPredicate "+?" (pyModRaw "spark.util.misc" "generate_prefix_id"))}

{defpredicate (RandomId $prefix $id) 
  doc: "Like GeneratedId but uses a random number generator"
  imp: (pyPredicate "+?" (pyModRaw "spark.util.misc" "random_prefix_id"))}

{defpredicate (MachineName $machine)
  doc: "Get the name of this computer."
  imp: (pyPredicate "-" (pyModRaw "spark.util.misc" "getMachineName"))}

{defpredicate (IdleWaitTime $time)
  doc: "How many seconds of inactivity we wait for until posting a (NowIdle) newfact event"
  imp: (pyModRaw "spark.util.misc" "IdleWaitTime")}

{defpredicate (NowIdle)
  doc: "Ephemeral predicate indicating that the SPARK execution engine had to wait"}

{defaction (executeCommand $command $params)
  doc: "Execute an external command"
  imp: (pyAction "++" (pyMod "spark.util.misc" "executeCommand"))
}

{defaction (startFile $filename)
  doc: "Open $filename with the appropriate application"
  imp: (pyAction "+" (pyMod "spark.util.misc" "startFile"))
}

{defaction (svnRevisionNum)
  doc: "Prints the Subversion revision number for this build (requires SVN)."
  imp: (pyAction "" (pyMod "spark.util.misc" "getSvnVersion"))}

{defaction (getFileVersion $filename)
  doc: "Prints the Subversion revision number for a file or module, if possible."
  imp: (pyAction "+" (pyMod "spark.util.misc" "getFileVersion"))}

{defaction (openBrowser $url)
  doc: "Open $url with the default browser"
  imp: (pyAction "+" (pyMod "spark.util.misc" "openBrowser"))
}

{deffunction (getUserHomeDir)
  doc: "Return the user home directory"
  imp: (pyFunction "" (pyMod "spark.util.misc" "getUserHomeDir"))
}

{defaction (zipDirectory $targetFile $directory $unwantedList)
  doc: "Zip a directory to a file excluding the files listed un $unwantedList and separated by ,"
  imp: (pyAction "+++" (pyMod "spark.util.misc" "toZip"))
}

exportall:
