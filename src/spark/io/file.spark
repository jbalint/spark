#*****************************************************************************#
#* Copyright (c) 2004-2007, SRI International.                               *#
#* All rights reserved.                                                      *#
#*                                                                           *#
#* Redistribution and use in source and binary forms, with or without        *#
#* modification, are permitted provided that the following conditions are    *#
#* met:                                                                      *#
#*   * Redistributions of source code must retain the above copyright        *#
#*     notice, this list of conditions and the following disclaimer.         *#
#*   * Redistributions in binary form must reproduce the above copyright     *#
#*     notice, this list of conditions and the following disclaimer in the   *#
#*     documentation and/or other materials provided with the distribution.  *#
#*   * Neither the name of SRI International nor the names of its            *#
#*     contributors may be used to endorse or promote products derived from  *#
#*     this software without specific prior written permission.              *#
#*                                                                           *#
#* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS       *#
#* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT         *#
#* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR     *#
#* A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT      *#
#* OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,     *#
#* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT          *#
#* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,     *#
#* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY     *#
#* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT       *#
#* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE     *#
#* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.      *#
#*****************************************************************************#
#* "$Revision: 463 $" *#
#* $Source: $ *#
#*****************************************************************************#


{defaction (copyFile $src $des)
  doc: "Copy the contents of file $src, creating or overwriting file $des." 
  imp: (pyAction "++" (pyModRaw "shutil" "copy"))}

{defaction (deleteFile $file)
  doc: "Delete $file" 
  imp: (pyAction "++" (pyModRaw "os" "remove"))}

{defaction (open $fname $mode $desc)
  doc: "Returns a file descriptor, opening or creating a file named $fname." 
  imp: (pyAction "++-" (pyModRaw "spark.io.file" "FileWrapper"))}

{defaction (close $desc)
  doc: "Closes the file $desc." 
  imp: (pyAction "+" (pyMeth "close"))}

{defaction (flush $desc)
  doc: "Requests that $desc's buffer be written out to the operating systsm.." 
  imp: (pyAction "+" (pyMeth "flush"))}

{deffunction (filename $desc)
  doc: "Returns the name of the file." 
  imp: (pyFunction "+" (pyMeth "_getName"))}

{defaction (read $desc $num $text)
  doc: "Reads $num many bytes of the file $desc and returns the content." 
  imp: (pyAction "++-" (pyMeth "read"))}

{defaction (readAll $desc $text)
  doc: "Reads all of the remaining of the file $desc and returns the content." 
  imp: (pyAction "+-" (pyMeth "read"))}

{defaction (readLine $desc $text)
  doc: "Reads one line of the file $desc and returns the content." 
  imp: (pyAction "+-" (pyMeth "readline"))}

{defaction (seek $desc $pos $how)
  doc: "Sets $desc's current position to the signed integer byte offset $pos from a reference point." 
  imp: (pyAction "+++" (pyMeth "seek"))}

{deffunction (tell $desc)
  doc: "Returns $desc's current position." 
  imp: (pyFunction "+" (pyMeth "tell"))}

{defaction (truncate $desc $size)
  doc: "Truncates the file to be at most $size bytes" 
  imp: (pyAction "++" (pyMeth "truncate"))}

{defaction (write $desc $str)
  doc: "Writes the bytes of string $str to the file." 
  imp: (pyAction "++" (pyMeth "write"))}

{defaction (writeLines $desc $lines)
  doc: "Writes each line in $lines $str to the file." 
  imp: (pyAction "++" (pyMeth "writelines"))}

exportall:

